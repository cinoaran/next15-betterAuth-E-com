generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Image   String?
  title   String
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blogs")
}

model User {
  id            String    @id @default(cuid()) @map("id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  blogs         Blog[]
  sessions      Session[]
  accounts      Account[]
}

model Session {
  id             String   @id @default(cuid()) @map("id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Merchant {
  id        String    @id @default(cuid())
  name      String    @unique
  address   String
  web       String
  phone     String
  email     String
  partner   Partner[]
  status    String    @default("pending")
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
}

model Partner {
  id         String   @id @default(cuid())
  name       String
  phone      String
  email      String
  department String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @db.Timestamp(6)
  Merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId String   @unique
}

model Product {
  id          String    @id @default(cuid())
  merchantId  String
  name        String
  description String
  isActive    Boolean   @default(false)
  isFeatured  Boolean   @default(false)
  brand       String
  subcategory String
  rating      Decimal   @default(0) @db.Decimal(4, 2)
  numReviews  Int       @default(0)
  slug        String    @unique(map: "product_slug_idx")
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)
  categoryId  String
  variants    Variant[]
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  products Product[]
}

model Variant {
  id            String   @id @default(cuid())
  productId     String
  size          String
  international String
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)
  product       Product  @relation(fields: [productId], references: [id])
  options       Option[]
}

model Option {
  id         String   @id @default(cuid())
  variantId  String
  color      String
  entryPrice Decimal  @default(0) @db.Decimal(6, 2)
  sellPrice  Decimal  @default(0) @db.Decimal(6, 2)
  quantity   Int
  sku        String
  url        String
  image      String[]
  weight     Float
  stockLevel Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  variant    Variant  @relation(fields: [variantId], references: [id])
}
